import React, {createContext, useState} from 'react'
import axios from 'axios'
import all_product from '../Components/Assets/all_product'

export const ShopContext = createContext(null)

const getDefaultCart = () => {
    let cart = {}

    for (let index = 0; index < all_product.length + 1; index++) {

        cart[index] = 0;

    }
    return cart;

}

const ShopContextProvider = (props) => {

    const [cartItems, setCartItems] = useState(getDefaultCart())
    
    const addToCart = (itemId) => {
        setCartItems((prev) => ({...prev, [itemId]: prev[itemId] + 1}))

    }

    const removeFromCart = (itemId) => {

        setCartItems((prev) => ({...prev, [itemId]: prev[itemId] - 1}))


    }

    const getTotalCartAmount = () => {

        let totalAmount = 0;

        for(const item in cartItems){
            
            if(cartItems[item] > 0){
                let itemInfo = all_product.find((products) => products.id === Number(item))
                totalAmount += (itemInfo.new_price * cartItems[item])
            }

        }
        return totalAmount

    }

    const getTotalCartItems = () => {
        let totalItem = 0

        for(const item in cartItems){
            if(cartItems[item] > 0){
                totalItem += cartItems[item]
            }

        }
        return totalItem

    }

    const scrollToTop = () => {
        const scrollToTopAnimation = () => {
          const currentPosition = window.scrollY;
    
          if (currentPosition > 0) {
            window.scrollTo(0, currentPosition - 150);
            requestAnimationFrame(scrollToTopAnimation);

          }

        }
        requestAnimationFrame(scrollToTopAnimation);

    }

    //Register and Login
    const [formData, setFormData] = useState({
        fname: '',
        lname: '',
        email: '',
        password: ''
    });

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    const handleChange = (e) => {

        const { name, value, type, checked } = e.target;

        setFormData((prev) => ({

            ...prev,
            [name]: type === "checkbox" ? checked : value

        }));
    };

     // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Submit ‡∏ü‡∏≠‡∏£‡πå‡∏°
    const handleSubmit = async (e) => {

        e.preventDefault();
        console.log(e.target.dataset.type)

        try {
            
            if(e.target.dataset.type === 'register'){

                if(formData.checkbox && formData.fname && formData.lname && formData.email && formData.password){

                    const response = await axios.post(`http://localhost:5174/register`, formData, {
                        withCredentials: true,
                    })
                    console.log(response.data)
                    if(response.data.status == 'OK'){
                        
                        alert('Sig Up Success üòç')
    
                        window.location = '/login'
    
                    }

                    else if(response.data.message.code == "ER_DUP_ENTRY"){
                        alert('Email ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Email ‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö')
                    }
    
                }

                else if(!formData.checkbox){

                    throw new Error('no checkbox reg')

                }

                else if(!formData.fname|| !formData.lname){

                    throw new Error('no name reg')

                }

                else if(!formData.email || !formData.password){

                    throw new Error('no email,password reg')

                }

            }

            else if(e.target.dataset.type === 'login'){

                if(formData.fname && formData.email && formData.password){

                    const response = await axios.post(`http://localhost:5174/login`,  formData)

                    if(response.data.status == 'OK'){

                        alert('Login Success üòç')
                        // window.location = '/'
    
                    }

                    else if(response.data.message == 'no user'){
                        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞ Email ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö')
                    }

                    else if(response.data.status == 'ERROR'){
                        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Password ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö')
                    }
    
                }

                else if(!formData.fname){

                    throw new Error('no name log')

                }

                else if(!formData.email || !formData.password){

                    throw new Error('no email,password log')

                }

            }

        } 

        catch (err) {

            console.log(err)

            if(err.message === 'no checkbox reg'){
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡πä‡∏Å Checkbox ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö')
            }

            else if(err.message === 'no name reg'){
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏™‡∏Å‡∏∏‡∏• ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö')
            }

            else if(err.message === 'no email,password reg'){
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å email ‡πÅ‡∏•‡∏∞ Password ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö')
            }

            else if(err.message === 'no name log'){
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö')
            }

            else if(err.message === 'no email,password log'){
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å email ‡πÅ‡∏•‡∏∞ Password ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ')
            }

            else{
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ö Server')
            }

        }

    }

    
    const contextValue = {formData, handleChange, handleSubmit, scrollToTop, getTotalCartItems, getTotalCartAmount, all_product, cartItems, addToCart, removeFromCart}

    return (
        <ShopContext.Provider value={contextValue}>
            {props.children}
        </ShopContext.Provider>
    )

}

export default ShopContextProvider